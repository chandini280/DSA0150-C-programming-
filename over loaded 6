#include <iostream>
#include <stdexcept>

class Array {
private:
    int* data;
    size_t size;

public:
    // Constructor
    Array(size_t size) : size(size) {
        data = new int[size];
    }

    // Destructor
    ~Array() {
        delete[] data;
    }

    // Overload the [] operator for non-const objects
    int& operator[](size_t index) {
        if (index >= size) {
            throw std::out_of_range("Index out of range");
        }
        return data[index];
    }

    // Overload the [] operator for const objects
    const int& operator[](size_t index) const {
        if (index >= size) {
            throw std::out_of_range("Index out of range");
        }
        return data[index];
    }

    // Method to get the size of the array
    size_t getSize() const {
        return size;
    }
};

int main() {
    size_t size = 5;
    Array arr(size);

    // Set values in the array
    for (size_t i = 0; i < size; ++i) {
        arr[i] = static_cast<int>(i * 10);
    }

    // Get and print values from the array
    std::cout << "Array elements:" << std::endl;
    for (size_t i = 0; i < size; ++i) {
        std::cout << "arr[" << i << "] = " << arr[i] << std::endl;
    }

    // Attempt to access an out-of-range index (uncomment to see the exception)
    // std::cout << "arr[" << size << "] = " << arr[size] << std::endl;

    return 0;
}
